{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Total Miner Creative Documentation","text":"<p>Documention I made for Total Miner's creative features, such as banners and TMScript.</p> <p>Created by galactic_2005. Made with Material for MKDocs.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>TMScript</li> <li>Documentation</li> </ul> <p>Note that this documentation is unfinished and still contains missing content, errors, and grammatical issues.</p>"},{"location":"documentation/","title":"Documentation","text":"<p>Here's a list of documentation sorrounding various topics in Total Miner.</p>"},{"location":"documentation/#documentation-index","title":"Documentation Index","text":"<ul> <li>Clan Banners</li> <li>Clock Time</li> <li>Permissions</li> <li>Skills System</li> </ul>"},{"location":"documentation/clan-banners/","title":"Clan Banners","text":"<p>This is a table of all clan banners and their associated ID for scripting.</p> Banner Image Banner ID 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 <p>Any ID not found on this table will result in a blank banner.</p>"},{"location":"documentation/clan-banners/#see-also","title":"See Also","text":"<ul> <li>Clan command</li> <li>IsClan command</li> </ul>"},{"location":"documentation/clock-time/","title":"Clock Time","text":"<p>Clock time is a mechanic in Total Miner that is an important part of various aspects of the world, such as when monsters start spawning or when it is considered day time through scripting. As such, it is important to understand what it is and how it can be used. This documentation is created to achieve this goal.</p>"},{"location":"documentation/clock-time/#what-is-clock-time","title":"What is Clock Time","text":"<p>Clock time is the value given when one of the following methods is used:</p> TMScriptLUA <p>Clock time is given when the [Clock:] built-in value type is used within the var command as shown:</p> clock-time.txt<pre><code>// Get clock time\nvar [clockTime] = [Clock:]\n</code></pre> <p>Clock time is given with the get_hour() function as shown:</p> clock-time.lua<pre><code>-- Get clock time\nlocal clock_time = get_hour()\n</code></pre> <p>When getting the current clock time, it will output a number between 0 to 24, indicating the time in a fashion similar to hours in a day.</p>"},{"location":"documentation/clock-time/#clock-time-modification","title":"Clock Time Modification","text":"<p>There are currently two ways clock time is modified, which is by the Day/Night Cycle and Time Forwarding/Reversing.</p>"},{"location":"documentation/clock-time/#daynight-cycle","title":"Day/Night Cycle","text":"<p>When the Day/Night Cycle option is enabled, clock time increments roughly by 0.019 per second, meaning a full in-game day is roughly 1,641.6 seconds, or 27.36 minutes.</p> <p>In non-creative worlds, there is no option to disable the Day/Night Cycle.</p>"},{"location":"documentation/clock-time/#time-forwardingrewinding","title":"Time Forwarding/Rewinding","text":"<p>In creative worlds, players with the Admin permission gain the ability to change clock-time by either going forward or backwards in clock time, referred to by the Game Help menu as Time Forwarding/Reversing.</p> <p>When Time Forwarding/Reversing, the clock time changes by roughly 2.33 per second. Forwarding time increments clock time by 2.33, while reversing time deincrements clock time by 2.33.</p>"},{"location":"documentation/clock-time/#clock-time-usage-in-scripting","title":"Clock Time Usage in Scripting","text":"<p>Clock time is used in the following commands/functions:</p> TMScriptLUA <ul> <li>IsClock</li> <li>IsDayTime</li> <li>var</li> </ul>"},{"location":"documentation/permissions/","title":"Permissions","text":"<p>The Permission system is a mechanic in Total Miner that lets world creators control what players can or cannot do in their world. This can allow for world creators to remove destructive control of the world from players as well as giving permission to admin players to further aid with world creation or management.</p>"},{"location":"documentation/permissions/#permission-control","title":"Permission Control","text":"<p>Permissions can be either disabled or enabled for every player currently in the gameplay session. Additionally, a set of permissions given to every new player of the world exists, called Default permissions.</p> <p>This allows for almost all permissions to be either enabled or disabled for new players joining the world for the first time, except for the Grief, Admin, and Save permissions, which are always locked to being disabled.</p>"},{"location":"documentation/permissions/#list-of-permissions","title":"List of Permissions","text":""},{"location":"documentation/permissions/#basic","title":"Basic","text":"<p>These permissions are given to every player in the world and cannot be disabled. The following actions can be performed by players, even with no permissions:</p> <ul> <li>Walk around the world.</li> <li>Damage and kill actors.</li> <li>Access Crates.</li> <li>Read Books (but are unable to edit books).</li> <li>Open Wood and Steel Doors.</li> <li>Read NPC speed bubbles (Xbox 360 only).</li> </ul>"},{"location":"documentation/permissions/#adventure","title":"Adventure","text":"<p>Players with the Adventure permission can perform the following actions:</p> <ul> <li>Collect item pickups.</li> <li>Access Chests, Furnaces, and Bookcases.</li> <li>Access Economized Shops (but are unable to economize shops themselves).</li> <li>Rate worlds.</li> </ul>"},{"location":"documentation/permissions/#fly","title":"Fly","text":"<p>Players with the Fly permission can fly around the map in Creative without restriction, or use the Amulet of Flight in Survival or Dig Deep to fly.</p> <p>Certain Avatars are able to bypass this permission and are also able to fly regardless of mode, which are:</p> <ul> <li>Robotic</li> <li>Testerman</li> <li>Hermes Wraith</li> </ul>"},{"location":"documentation/permissions/#map","title":"Map","text":"<p>Players with the Map permission can toggle and view their minimap, as well as access the top-down surface map.</p> <p>It's imporant to not to toggle the Map permission extensively, as it automatically disables the minimap option and forces players to open up their menus to re-enable it, which can be tiresome and annoying. It's recommended to either keep this enabled or disabled entirely or to toggle it sparingly.</p>"},{"location":"documentation/permissions/#voice-chat","title":"Voice Chat","text":"<p>Players with the Voice Chat permission can use the in-game voice chat system. Note that the voice chat system uses significant network bandwidth.</p>"},{"location":"documentation/permissions/#text-chat","title":"Text Chat","text":"<p>Players with the Text Chat permission can use the in-game text chat system. This also limits the player from viewing chat log history.</p>"},{"location":"documentation/permissions/#spectate","title":"Spectate","text":"<p>Players with the Spectate permission can spectate other players, which includes the world owner and players with the Admin permission.</p>"},{"location":"documentation/permissions/#shops","title":"Shops","text":"<p>Players with the Shops permission can access shops with only one exception, which is that they cannot buy Skeleton Keys from System Shops.</p>"},{"location":"documentation/permissions/#view-scripts","title":"View Scripts","text":"<p>Players with the View Scripts permission can view scripts using the built-in script editor, but are not able to create or modify scripts in any capacity. Players are also unable to use external script editors and copy commands.</p>"},{"location":"documentation/permissions/#grief","title":"Grief","text":"<p>This is one of three permissions that are locked to being disabled in Default permissions.</p> <p>Players with the Grief permission can perform the following actions:</p> <ul> <li>Start fires using Lighters or Fire Arrows.</li> <li>Place lava using the Lava bucket.</li> <li>Create explosions using TNT, C4, Grenade Launchers, or Boom Arrows.</li> <li>Use the creative tool Flood in Creative mode only.</li> </ul> <p>An important consideration to make when world building or hosting is that fires can still be started through in-drect means (such as flammable blocks being placed close to lava) or simply by placing the Fire block, which isn't restricted to players with the Grief permission.</p>"},{"location":"documentation/script-reach/","title":"Player Specification","text":"<p>When using commands or functions, you may notice some will include parameters to specify what players are affected by said command/function. For example:</p> player-specification.txt<pre><code>// Local specification\nNotify [Hello, Player.] [local]\n\n// Global specification\nNotify [Hello, World.] [global]\n\n// Admin specification\nNotify [Hello, Admins.] [admin]\n</code></pre> <p>These parameters can be helpful in ensuring only certain players are affected, instead of affecting everyone in the game in what could be considered unnecessary (such as notifying everyone that they're level 5, even if only one player has reached level 5).</p>"},{"location":"documentation/script-reach/#local","title":"Local","text":"<p>Using the [local] parameter will only </p> <p>local remote global admin clan</p>"},{"location":"documentation/script-reach/#clock-time-usage-in-scripting","title":"Clock Time Usage in Scripting","text":"<p>Clock time is used in the following commands/functions:</p> TMScriptLUA <ul> <li>IsClock</li> <li>IsDayTime</li> <li>var</li> </ul>"},{"location":"documentation/skills-system/","title":"Skills System","text":"<p>The Skills System is a mechanic present in Total Miner which is used in Dig Deep and Survival worlds as a form of progression to unlock new content by interacting with the world, but can be used in Creative worlds for a variety of reasons (mainly progression or combat-related reasons).</p>"},{"location":"documentation/skills-system/#enablingdisabling-the-skills-system","title":"Enabling/Disabling the Skills System","text":"<p>The Skills System can be toggled in the following ways:</p> <ul> <li>In Lobby Setup.</li> <li>In the Old Menu under the Creative submenu in Creative only<sup>1</sup>.</li> <li>In the New Menu under the Options submenu in all game modes.</li> </ul> <p>In Creative mode, where Finite Resources can be disabled, Finite Resources must be enabled to use the Skills System.</p>"},{"location":"documentation/skills-system/#xp-multiplier","title":"XP Multiplier","text":"<p>The XP Multiplier determines how fast you earn XP from performing actions that level up your skills. By default the XP Multiplier is set to 1.00, but can be changed from 0.01 to 100.00.</p>"},{"location":"documentation/skills-system/#globallocal-differences","title":"Global/Local Differences","text":"<p>Note that the Global Skills System does not apply to the version on Steam currently, where the Local Skills System is currently the only option in all game modes.</p>"},{"location":"documentation/skills-system/#skills-system-usage-in-scripting","title":"Skills System Usage in Scripting","text":"<p>The Skills System is used in the following commands/functions:</p> TMScriptLUA <ul> <li>HasSkill</li> <li>IsSkills</li> <li>Skill</li> <li>SkillXP</li> </ul> <ol> <li> <p>The Old Menu disables going into the Creative submenu where the Skills System toggle is located in non-creative worlds. This unfortunately means that that it is impossible to toggle the Skills System in the middle of gameplay in non-creative worlds in the Xbox 360 version of Total Miner, where the Old Menu is the only option.\u00a0\u21a9</p> </li> </ol>"},{"location":"tmscript/","title":"TMScript","text":"<p>TMScript is the game's built-in scripting language that allows you to interact with the world in various ways.</p>"},{"location":"tmscript/#documentation-index","title":"Documentation Index","text":"<ul> <li>Syntax</li> <li>History Vs. Var</li> <li>List of Commands</li> </ul>"},{"location":"tmscript/history-vs-var/","title":"History vs Var","text":"<p>It can be confusing for newcomers to determine when to use each command, as functionally, they are similar. However, there are some key differences between the two that should help players determine where each one is more effective.</p>"},{"location":"tmscript/history-vs-var/#differences-between-historical-records-and-variables","title":"Differences between Historical Records and Variables","text":""},{"location":"tmscript/history-vs-var/#calculation-depth","title":"Calculation Depth","text":"<p>The var command contains a number of built-in values and supports 5 different operators. This allows for a number of different expressions to calculate the value of a variable.</p> <p>Historical records are confined to what the History command offers, which isn't much. You can work with setting historical records to specific values, addition, and subtraction.</p> <p>Another note worth considering is that variables support fractional numbers, whereas hisotrical records only support whole numbers.</p>"},{"location":"tmscript/history-vs-var/#script-persistency","title":"Script Persistency","text":"<p>Variables only exist during the execution of a script. Once execution finishes of the script the value of the variables are reset back to 0.</p> <p>Historical records are persistent in that they do not reset upon script execution finishing. As such, they can be used in seperate scripts at seperate times without the worry of resetting back to 0.</p>"},{"location":"tmscript/history-vs-var/#script-scope","title":"Script Scope","text":"<p>Variables can only be used in the script they are defined in. You can use variables in other scripts using the Script command with the [vars:] parameter, however this is still quite limiting in scope.</p> <p>Historical records, on the other hand, are globally reachable in scope for all scripts, making historical records much more flexible in this regard.</p>"},{"location":"tmscript/history-vs-var/#numeric-universality","title":"Numeric Universality","text":"<p>Variables can be used anywhere a numeric literal can be used, for example:</p> cake-amount.txt<pre><code>var [cakeAmount] = [3]\n\n// Give the actor cake\nInventory [actor] [add] [Cake] [cakeAmount]\n</code></pre> <p>This script, when executed, will give cake to an actor based on the variable cakeAmount. Here, we've set it to 3, so the actor will recieve 3 cake. Remaking this with History is not possible without variables.</p>"},{"location":"tmscript/history-vs-var/#when-to-use","title":"When to Use","text":"<p>In general, variables should be used when:</p> <ul> <li>The variable is needed only in the script it is defined in, or other scripts defined with the Script command.</li> <li>The variable is needed to calculate a value.</li> <li>The variable is needed in place of a numeric literal.</li> <li>The variable is needed to hold a fractional value.</li> </ul> <p>Historical records should be used when:</p> <ul> <li>The record is needed in a variety of scripts, which are not connected.</li> <li>The record is needed to hold a value of some kind, such as a currency.</li> <li>The record is needed to count up or down.</li> <li>The record is needed to ever only hold a whole number.</li> </ul> <p>Ultimately, it's your call when to use one over the other. However, learning about the limitations of each value type should give you a good idea as to when to use each one in the most effective way for your worlds.</p>"},{"location":"tmscript/syntax/","title":"Syntax","text":""},{"location":"tmscript/syntax/#commands-and-parameters","title":"Commands and Parameters","text":"<p>TMScript, like other programming languages, contains functions. Functions are called commands in TMScript. The following is the syntax of a command:</p> <p>Command [parameter] [parameter]...[parameter]</p> <p>The first word is that of the command. The defined command allows for different functions to be executed. For example, the Inventory command can modify actor and block inventories, whilst the Notify command can display notification messages on the top-left side of the screen.</p> <p>Following this, most commands offer parameters. Parameters provide data for the command. For example, the Clan command offers [name] and [bannerID] as parameters, which are used to define what clan the player joins and what banner ID is used for that clan.</p>"},{"location":"tmscript/syntax/#case-sensitivity","title":"Case sensitivity","text":"<p>TMScript is a case-insensitive language. This means that \"value\" and \"VALUE\" mean the same thing in this language. Here's a demonstration:</p> case-insensitive.txt<pre><code>var [value] = [10]\n\n// This will work\nNotify [[value]] [local] [0,0,0]\n\n// But also this\nnotify [[value]] [local] [0,0,0]\n\n// And this\nNOTIFY [[VALUE]] [LOCAL] [0,0,0]\n\n// And even mixing up the capalitized letters\nnotIFY [[VALue]] [LoCal] [0,0,0]\n</code></pre> <p>Running this script will create four notification messages, outputting \"10\" each time despite the casing being different in both the commands and parameters.</p>"},{"location":"tmscript/syntax/#comments","title":"Comments","text":"<p>Comments are created by using double slashes. There is no comment ending indicator, so the rest of the line is considered a comment.</p> comments.txt<pre><code>// Comments can be used to document your scripts\n// This can help make scripts more readable to yourself or other scripters\n\n// Comments are indicated by // at the beginning of a script\n// Whilst they are generally built to leave text, you can comment commands\n// This is because they are technically considered a comment, such as:\n\n// Notify [Hello, World!] [global] [0,0,0]\n// Since this is considered a comment, the command will not run.\n\n// Additionally, you you could aso put the // after commands\n// Such as in the following example:\nNotify [Test notification] [global] [0,0,0] // Test\n\n// Though they are less readable and not recommended\n</code></pre>"},{"location":"tmscript/commands/","title":"Commands","text":"<p>Commands are functions with parameters that allows control of the world. A script consists of commands</p>"},{"location":"tmscript/commands/#list-of-commands","title":"List of Commands","text":"<p>Below is a list of commands in TMScript.</p> <ul> <li>CaveIn</li> <li>Clan</li> <li>HealthMod</li> <li>History</li> <li>Input</li> <li>Kick</li> <li>Loop</li> <li>Marker</li> <li>OpenBlock</li> <li>Random</li> <li>ReplaceRegion</li> <li>Skill</li> <li>SkillXP</li> <li>var</li> <li>Wait</li> <li>Waypoint</li> </ul>"},{"location":"tmscript/commands/#see-also","title":"See Also","text":"<ul> <li>List of Query Commands</li> </ul>"},{"location":"tmscript/commands/cavein/","title":"CaveIn","text":"<p>Starts a cave-in (also known as earthquakes) at a position in the world.</p> <p>CaveIn [x,y,z] [seed]</p> <p>[x,y,z] - The coordinate in the world of where the cave-in occurs.</p> <p>[seed] - Optional parameter that determines what random seed the cave-in uses. If omitted, a value of 0 is used.</p> <p>Only 1 cave-in can simultaneously occur in the world at a time. If any cave-in is currently running when the CaveIn command is executed, than it will be ignored.</p>","tags":["TMScript"]},{"location":"tmscript/commands/cavein/#examples","title":"Examples","text":"cavein-example.txt<pre><code>// Start a cave-in\nCaveIn [0, 0, 0] [10]\n</code></pre> <p>Starts a cave-in at [0,0,0] with a random seed of 10. If a cave-in is currently active already, this command is ignored.</p>","tags":["TMScript"]},{"location":"tmscript/commands/clan/","title":"Clan","text":"<p>Assigns the player to a clan or removes them from a clan.</p> <p>Clan [name]</p> <p>Clan [name] [bannerID]</p> <p>Clan [remove]</p> <p>[name] - The name of the clan to assign the player to.</p> <p>[bannerID] - The clan banner ID. If omitted, the clan banner will be blank.</p> <p>[remove] - Removes the player from the clan they are assigned to.</p>","tags":["TMScript"]},{"location":"tmscript/commands/clan/#examples","title":"Examples","text":"clan-example-1.txt<pre><code>// Assign the player to the clan Team1 with clan banner ID 33\nClan [Team1] [33]\n</code></pre> <p>Assigns the player who activated this script to a clan named Team1, using the clan banner ID 33 .</p> clan-example-2.txt<pre><code>// Removes the player from the clan they are in.\nClan [remove]\n</code></pre> <p>Removes the player who activated this script from the clan they are in. If the player isn't in a clan, this command does nothing.</p>","tags":["TMScript"]},{"location":"tmscript/commands/clan/#see-also","title":"See Also","text":"<ul> <li>IsClan command</li> <li>Clan Banners</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/copyblock/","title":"CopyBlock","text":"<p>Copies a block from one location to another in the world.</p> <p>CopyBlock [x,y,z] [x,y,z]</p> <p>[x,y,z] - The 1st coordinate is the source location (the block to copy).</p> <p>[x,y,z] - The 2nd coordinate is the destination location (where to place the copy).</p> <p>The copied block retains all data and settings associated with the source block.</p>","tags":["TMScript"]},{"location":"tmscript/commands/copyblock/#examples","title":"Examples","text":"copyblock-example.txt<pre><code>CopyBlock [0, 100, 0] [100, 100, 100]\n</code></pre> <p>Copies the block at [0, 100, 0] to [100, 100, 100].</p>","tags":["TMScript"]},{"location":"tmscript/commands/healthmod/","title":"HealthMod","text":"<p>Manipulates an actor's health regeneration multiplier.</p> <p>HealthMod [multiplier]</p> <p>[multiplier] - How fast health regenerates. A value of 0 removes health regeneration, and a negative value damages the player over time. The default value is 1.</p> <p>Health regenerates at the rate of the health multiplier per second. So for example, a multiplier of 1 will regenerate 1 health per second, and a multiplier of 5 will regenerate 5 health per second. This works the other way around too with negative multipliers.</p>","tags":["TMScript"]},{"location":"tmscript/commands/healthmod/#examples","title":"Examples","text":"healthmod-example.txt<pre><code>// Default regneration\nHealthMod [1]\n</code></pre> <p>Sets the actor's health regeneration multiplier to 1, which is the default regeneration.</p>","tags":["TMScript"]},{"location":"tmscript/commands/history/","title":"History","text":"<p>Manipulates historical records. Historical records can be queried by the HasHistory command to determine if a record exists.</p> <p>History [name] [+|-|count|delete]</p> <p>History [name] [player|clan] [+|-|count|delete]</p> <p>[name] - The name of the historical record. History names support folders which allows you to match your history names with script names, where appropiate. Variable substitution is supported for History names.</p> <p>[+|-|count|delete] - Specify either an absolute value to set the history to, or specify a relative value to add to or subtract from. If delete is specified, then this command will instead delete the historical record.</p> <p>[player|clan] - Optional parameter that saves the historical record on the player or the player's clan instead of the world (system).</p> <p>Historical records are counters. So if the History command adds a record for the same name more than once, than the counter for the initial record is increased. For example:</p> history-counter.txt<pre><code>History [counter]\n</code></pre> <p>When executing this command the first time, it'll create the historial record \"counter\" with the value of 1. However, subsequent executions of this command will increment this record instead of creating new records.</p> <p>This allows scripts to query how many times a record has occured.</p>","tags":["TMScript"]},{"location":"tmscript/commands/history/#examples","title":"Examples","text":"history-example-1.txt<pre><code>// Create historical record\nHistory [ActionX]\n</code></pre> <p>Creates a new system historical record called ActionX with the value of 1. If the record already exists, it's incremented by 1 instead.</p> history-example-2.txt<pre><code>// Deincrement record\nHistory [ActionX] [-1]\n</code></pre> <p>Subtracts 1 from a system historical record called ActionX.</p> history-example-3.txt<pre><code>// Create historical record for player\nHistory [PlayerHistory] [player]\n</code></pre> <p>Creates a new historical record called PlayerHistory, which will be stored with the player. If this script isn't ran by a player, this command does nothing.</p> history-example-4.txt<pre><code>// Create historical record for clan\nHistory [ClanHistory] [clan]\n</code></pre> <p>Creates a new historical record called ClanHistory, which will be stored with the player's clan. If the player isn't in a clan, or if the script wasn't ran by a player, this command does nothing.</p>","tags":["TMScript"]},{"location":"tmscript/commands/input/","title":"Input","text":"<p>Prompts the player to enter a number.</p> <p>Input [var]</p> <p>[var] - The name of the variable to store the number entered.</p> <p>The player will be prompted to input any number from -9999999999 to 9999999999 when this command is ran.</p>","tags":["TMScript"]},{"location":"tmscript/commands/input/#examples","title":"Examples","text":"input-example.txt<pre><code>// Declare the variable password\nvar [password]\n\n// Get the player's input and put the prompt into the password variable\nInput [password]\n</code></pre> <p>Prompts the player who activated this script to enter a number. Once entered, the variable password contains the input.</p>","tags":["TMScript"]},{"location":"tmscript/commands/input/#see-also","title":"See Also","text":"<ul> <li>Var command</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/kick/","title":"Kick","text":"<p>Kicks the player who activated the script from the multiplayer session.</p> <p>kick</p> <p>Kicked players will not be able to rejoin the world until the multiplayer session has ended.</p> <p>This command does nothing in single-player and to players who are a developer of Total Miner.</p>","tags":["TMScript"]},{"location":"tmscript/commands/kick/#examples","title":"Examples","text":"kick-example-1.txt<pre><code>Kick\n</code></pre> <p>Kicks the player who activated this script out of the multiplayer session.</p> kick-example-2.txt<pre><code>If\n    HasHistory [Banned] [player] [true]\nThen\n    // Kick player if banned\n    Kick\nEndif\n</code></pre> <p>Setting this as one of the first scripts to execute when a player joins will automatically kick them from the world should they have the historical record Banned.</p>","tags":["TMScript"]},{"location":"tmscript/commands/loop/","title":"Loop","text":"<p>Restarts the script from the top.</p> <p>Loop</p> <p>Loop [millisecs]</p> <p>[millisecs] - The time in milliseconds to wait before the script restarts from the top. This value cannot be less than 2. If omitted the default value of 16 is used.</p> <p>Because of how scripts are queued for execution, these timings are not exact and shouldn't be relied upon.</p> <p>1000 milliseconds is equal to 1 second.</p> <p>Variables keep their value when the command is ran. See the second example for more information.</p>","tags":["TMScript"]},{"location":"tmscript/commands/loop/#examples","title":"Examples","text":"loop-example-1.txt<pre><code>Notify [I'm stuck in a loop!] [global] [0, 0, 0]\nLoop [500]\n</code></pre> <p>Creates a notification message approximately every 500 milliseconds (or 0.5 seconds) forever until the script is cancelled.</p> loop-example-2.txt<pre><code>// Define the variable counter\nvar [counter]\n\n// Set the block ColorRed at [0, 100, counter]\nSetBlock [0, 100, counter] [ColorRed]\n\n// Increment counter\nvar [counter] = [counter] + [1]\nIf\n    IsVar [counter] [&lt;] [101]\nThen\n    // Loop if counter is below 101\n    Loop\nEndif\n</code></pre> <p>When the loop command is ran, variables keep their value when the script restarts. This is used to create a line of 100 red blocks from [0, 100, 0] to [0, 100, 100].</p>","tags":["TMScript"]},{"location":"tmscript/commands/loop/#see-also","title":"See Also","text":"<ul> <li>Wait command</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/marker/","title":"Marker","text":"<p>Manipulates map markers.</p> <p>Marker [name] [x,z]</p> <p>Marker [name] [x,z] [admin]</p> <p>Marker [name] [delete]</p> <p>[name] - The name of the map marker.</p> <p>[xz] - The surface position of the map marker to create at.</p> <p>[admin] - If omitted, the map marker is visible to everyone. If used, the map marker will only be visible to those with admin permissions.</p> <p>[delete] - Deletes a map marker based on name.</p>","tags":["TMScript"]},{"location":"tmscript/commands/marker/#examples","title":"Examples","text":"marker-example-1.txt<pre><code>// Create a marker\nMarker [center] [0, 0]\n\n// Create a admin marker\nMarker [admin-base] [100, 100] [admin]\n</code></pre> <p>Creates a map marker at the center of the world titled \"center\" and another map marker only visible to admins titled \"admin-base\" at [100, 100].</p> marker-example-2.txt<pre><code>// Delete a marker\nMarker [secret] [delete]\n</code></pre> <p>Deletes the map marker titled \"secret\" in the world. If no such map marker exists, this command does nothing.</p>","tags":["TMScript"]},{"location":"tmscript/commands/marker/#see-also","title":"See Also","text":"<ul> <li>HasMarker command</li> <li>Waypoint command</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/openblock/","title":"OpenBlock","text":"<p>Opens the standard interface screen for container blocks.</p> <p>OpenBlock [x,y,z]</p> <p>[x,y,z] - The coordinate in the world of the block to open.</p> <p>Only the following blocks may be opened using this command:</p> <ul> <li>Block Shop</li> <li>Book</li> <li>Bookcase</li> <li>Chest</li> <li>Crate</li> <li>Furnace</li> <li>Item Shop</li> <li>Locked Chest</li> <li>Safe</li> <li>Workbench</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/openblock/#examples","title":"Examples","text":"openblock-example.txt<pre><code>OpenBlock [100, 100, 100]\n</code></pre> <p>Opens the block located at 100, 100, 100 for the player who activated this script.</p>","tags":["TMScript"]},{"location":"tmscript/commands/random/","title":"Random","text":"<p>Change the seed for the random number generator.</p> <p>Random [seed]</p> <p>[seed] - The value of the seed.</p>","tags":["TMScript"]},{"location":"tmscript/commands/random/#examples","title":"Examples","text":"random-example.txt<pre><code>// Set seed\nRandom [0]\n\n// Get random value\nvar [value] = [rand:100]\n\n// Notify seed value\nNotify [[value]] [local] [0,0,0]\n</code></pre> <p>Creates a notification message of a random value between 0 to 100. However, since the random seed is set earlier in the script, the value notified will always be the same.</p>","tags":["TMScript"]},{"location":"tmscript/commands/replaceregion/","title":"ReplaceRegion","text":"<p>Replaces all occurrences of a block in a cubic region with another block.</p> <p>ReplaceRegion [x,y,z] [x,y,z] [block1] [block2]</p> <p>[x,y,z] - The 1st coordinate is the minimum bound of the replace region.</p> <p>[x,y,z] - The 2nd coordinate is the maximum bound of the replace region.</p> <p>[block1] - The block type to be replaced.</p> <p>[block2] - The block type to replace with.</p>","tags":["TMScript"]},{"location":"tmscript/commands/replaceregion/#examples","title":"Examples","text":"replaceregion-example.txt<pre><code>// Replace Limestone with Marble\nReplaceRegion [0, 0, 0] [100, 100, 100] [Limestone] [Marble]\n</code></pre> <p>Replaces all Limestone blocks within the [0, 0, 0] to [100, 100, 100] cubic region with Marble blocks.</p>","tags":["TMScript"]},{"location":"tmscript/commands/replaceregion/#see-also","title":"See Also","text":"<ul> <li>HasSkill command</li> <li>IsSkills command</li> <li>SkillXP command</li> <li>Skills System</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/skill/","title":"Skill","text":"<p>Set, add, or subtrack a player's current skill level.</p> <p>Skill [name] [+|-|level]</p> <p>[name] - The name of the skill.</p> <p>[+|-|level] - The level to set the skill to, or to add or subtract levels from the skill.</p>","tags":["TMScript"]},{"location":"tmscript/commands/skill/#examples","title":"Examples","text":"skill-example-1.txt<pre><code>// Set skill levels\nSkill [Attack] [10]\nSkill [Defence] [25]\nSkill [Health] [50]\n</code></pre> <p>Sets three different skills to different skill levels for the player who activated this script.</p> skill-example-2.txt<pre><code>// Add 2 skill levels to building\nSkill [Building] [+2]\n\n// Subtract 3 skill levels to cooking\nSkill [Cooking] [-3]\n</code></pre> <p>Adds 2 skill levels to the Building skill and subtracts 3 levels to the Cooking skill for the player who activated this script.</p>","tags":["TMScript"]},{"location":"tmscript/commands/skill/#see-also","title":"See Also","text":"<ul> <li>HasSkill command</li> <li>IsSkills command</li> <li>SkillXP command</li> <li>Skills System</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/skillxp/","title":"SkillXP","text":"<p>Set, add, or subtrack a player's current skill XP.</p> <p>SkillXP [name] [+|-|xp]</p> <p>[name] - The name of the skill.</p> <p>[+|-|xp] - The xp to set the skill to, or to add or subtract xp from the skill.</p>","tags":["TMScript"]},{"location":"tmscript/commands/skillxp/#examples","title":"Examples","text":"skillxp-example-1.txt<pre><code>// Set some skills to have different amounts of xp\nSkillXP [Mining] [500]\nSkillXP [Digging] [750]\nSkillXP [Chopping] [100]\n</code></pre> <p>Sets three different skills to different amounts of xp for the player who activated this script.</p> skillsp-example-2.txt<pre><code>// Add 3000 xp to building\nSkill [Building] [+3000]\n\n// Subtract 2000 xp from crafting\nSkill [Crafting] [-2000]\n</code></pre> <p>Adds 3000 xp to the Building skill and subtracts 2000 xp from the Crafting skill for the player who activated this script.</p>","tags":["TMScript"]},{"location":"tmscript/commands/skillxp/#see-also","title":"See Also","text":"<ul> <li>HasSkill command</li> <li>IsSkills command</li> <li>Skill command</li> <li>Skills System</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/var/","title":"var","text":"<p>Declare variables and assign values.</p> <p>var [name] [name]...[name]</p> <p>var [name] = [value] op [value]...op [value]</p> <p>[name] - The name of the variable.</p> <p>Variable names cannot have spaces or contain special characters.</p> <p>[op] - Operators. The following operators can be used:</p> <ul> <li>(+) Addition</li> <li>(-) Subtraction</li> <li>(*) Multiplication</li> <li>(/) Division</li> <li>(%) Modulus</li> </ul> <p>Operators do not need to be surrounded by square brackets.</p> <p>Example:</p> operators.txt<pre><code>// With square brackets\nvar [value] = [4] [+] [2]\n\n// Without square brackets\nvar [value] = [4] + [2]\n\n// Both will work and the variable will be set to 6\n</code></pre> <p>[value] - A defined mathematical object. Values may be either a numeric literal, another variable or a built in value type as listed below.</p> <p>All built-in value type names must be succeeded by a color before the closing square bracket, even if they don't have parameters.</p> <ul> <li>[Abs:x] - The absolute value of x.</li> <li>[Sin:x] - The sine of x.</li> <li>[Cos:x] - The cosine of x.</li> <li>[Tan:x] - The tangent of x.</li> <li>[Sqrt:x] - The square root of x.</li> <li>[Single:x] - x converted to single precision.</li> <li>[Int:x] - x converted to an integer.</li> <li>[Neg:x] or [-x] - Negate x.</li> <li>[pi:] - The value of (\u03c0) Pi.</li> <li>[Clamp:x,y,z] - Clamp x to y and z.</li> <li>[Lerp:x,y,t] - Linear interpolation from x to y based on t.</li> <li>[Rand:x] - A random number between 0 to x inclusive.</li> <li>[Hash:text] - Returns an integral hash of text.</li> <li>[Clock:] - The world's current clock time between 0 to 24.</li> <li>[Health:] - The player's current health.</li> <li>[MaxHealth:] - The player's current maximum health (i.e. 100% current health).</li> <li>[Reach:] - The player's current reach.</li> <li>[Pos:x|y|z] - The player's current X, Y, or Z position.</li> <li>[Eye:x|y|z] - The player's current X, Y, or Z eye position.</li> <li>[Vel:x|y|z] - The player's current X, Y, or Z velocity.</li> <li>[View:x|y|z] - The player's current X, Y, or Z view direction.</li> <li>[Rel:x|y|z] - The script's relative X, Y, or Z block position.</li> <li>[Prel:x|y|z] - The player's X, Y, or Z block position.</li> <li>[Crel:x|y|z] - The player's X, Y, or Z cursor position.</li> <li>[Script:x|y|z] - The script's X, Y, or Z offset.</li> <li>[Skill:x] - The player's current skill level.</li> <li>[Skillxp:x] - The player's current skill xp.</li> <li>[History:key] - The value of the player's historical record [key].</li> <li>[Syshistory:key] - The value of the world's historical record [key].</li> <li>[ClanHistory:key] - The value of the clan's historical record [key].</li> <li>[Viewport:width|height] or [vp:w|h] - The viewport's width or height.</li> <li>[Block:x,y,z] - The id of the block at position XYZ.</li> <li>[Aux:x,y,z] - The aux data of the block at position XYZ.</li> <li>[Light:x,y,z] - The light level of the block at position XYZ.</li> <li>[SunLight:x,y,z] - The light level of the block at position XYZ (only light from the sun is considered in this value type).</li> <li>[BlockLight:x,y,z] - The block light level of the block at position XYZ (only light from light blocks, such as torches or sun boxes, are considered in this value type.)</li> <li>[Item:left|right|event] - The item id that is in either hand, or that caused the [swing], [equip], or [unequip] event to execute.</li> <li>[Inv:[item][x,y,z]] - The amount of an item in the player's inventory. The [XYZ] parameter is optional, and if used, this will instead return the amount of an item in the block's inventory at XYZ position.</li> <li>[Distance:[x,y,z][x,y,z]] - The distance between two points in the world.</li> <li>[Gamercount:all|local|remote] - The number of players in the world, specified by type.</li> <li>[Gamercount:[zone][all|local|remote]] - The number of players in a zone, specified by type.</li> <li>[Gamercount:[x,y,z][x,y,z][all|local|remote]] - The number of players in a cubic area, specified by type.</li> <li>[Gamercount:[x,y,z][radius][all|local|remote]] - The number of players in a spherical area, specified by type.</li> <li>[NpcCount:npctype] - The number of type of NPC in the world.</li> <li>[NpcCount:[zone][npctype]] - The number of a type of NPC in a zone.</li> <li>[NpcCount:[x,y,z][x,y,z][npctype]] - The number of a type of NPCs in a cubic area.</li> <li>[NpcCount:[x,y,z][radius][npctype]] - The number of type of NPCs in a spherical area.</li> </ul> <p>There are two forms of the var command. One declares one or more variable names:</p> <p>var [name] [name]...[name]</p> <p>The other assigns a value to a single variable, based on an expression:</p> <p>var [name] = [value] op [value]...op [value]</p> <p>A script can only have up to 256 variables.</p>","tags":["TMScript"]},{"location":"tmscript/commands/var/#examples","title":"Examples","text":"delcaring-variables.txt<pre><code>// Declare variables\nvar [velx] [vely] [velz] [length] [distance] [dir]\n</code></pre> <p>Declares 6 variable names. If these variables have not been passed from a calling script, they are assigned a value of 0. All variables used in a script must be declared before they are used. They may be declared anyhwere in a script, as long as it is before they are used.</p>","tags":["TMScript"]},{"location":"tmscript/commands/var/#see-also","title":"See Also","text":"<ul> <li>Input command</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/var/#depreciates","title":"Depreciates","text":"<p>The following commands and/or parameters are depreciated and are only available to support maps and scripts which have used these in the past. It is recommended to not use these depreciated commands and/or parameters over the newer alternatives.</p> <p>[value] has depreciated built-in value types as listed below:</p> <ul> <li>[MobCount:mobtype] - Works the same as the [NpcCount:npctype] value type. Zone, cubic, and spherical variations also exist.</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/wait/","title":"Wait","text":"<p>Pauses the script execution for a period of time.</p> <p>Wait [millisecs]</p> <p>[millisecs] - The time in milliseconds to wait before script execution continues.</p> <p>1000 milliseconds is equal to 1 second.</p>","tags":["TMScript"]},{"location":"tmscript/commands/wait/#examples","title":"Examples","text":"wait-example.txt<pre><code>Wait [1000]\nNotify [\"A second has passed.\"] [global] [0,0,0]\n</code></pre> <p>Script execution waits for 1000 milliseconds (or 1 second) before a notification message is created displaying a second has passed.</p>","tags":["TMScript"]},{"location":"tmscript/commands/wait/#see-also","title":"See Also","text":"<ul> <li>Loop command</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/waypoint/","title":"Waypoint","text":"<p>Manipulates the player waypoint.</p> <p>Waypoint [x,z]</p> <p>Waypoint [delete]</p> <p>[xz] - The surface position of the waypoint to set to.</p> <p>[delete] - Deletes the player's waypoint.</p> <p>A player can only have one waypoint at a time. If the player already has a waypoint then setting a new one will override the previous one.</p>","tags":["TMScript"]},{"location":"tmscript/commands/waypoint/#examples","title":"Examples","text":"waypoint-example-1.txt<pre><code>// Set the player's waypoint\nWaypoint [-100, -100]\n</code></pre> <p>Sets the player's waypoint to [-100, -100]. If they previously had a waypoint it will be overrided with this new one.</p> waypoint-example-2.txt<pre><code>// Delete the player's waypoint\nWaypoint [delete]\n</code></pre> <p>Delete the player's waypoint. If the player doesn't have a waypoint, this command does nothing.</p>","tags":["TMScript"]},{"location":"tmscript/commands/waypoint/#see-also","title":"See Also","text":"<ul> <li>Marker command</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/","title":"Query Commands","text":"<p>Query commands are used in conditional statements to query different elements of the world. They all either return true when their condition is met, or false if it isn't.</p>"},{"location":"tmscript/commands/query-commands/#list-of-query-commands","title":"List of Query Commands","text":"<p>Below is a list of query commands used in conditional statements in TMScript.</p> <ul> <li>HasSkill</li> <li>IsClan</li> <li>IsClock</li> <li>IsDayTime</li> <li>IsFiniteResources</li> <li>IsSkills</li> <li>IsTime</li> </ul>"},{"location":"tmscript/commands/query-commands/#see-also","title":"See Also","text":"<ul> <li>List of Commands</li> </ul>"},{"location":"tmscript/commands/query-commands/hasskill/","title":"HasSkill","text":"<p>Queries player skill levels.</p> <p>HasSkill [skill] [compare] [level]</p> <p>[skill] - The skill name to query.</p> <p>[compare] - Comparision based on the skill level of the player.</p> <p>[level] - The skill level target for comparison.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/hasskill/#examples","title":"Examples","text":"hasskill-example.txt<pre><code>If\n    // Does the player have 20 or more skill levels in Defence\n    HasSkill [Defence] [&gt;=] [20]\nThen\n    // Give the player a Steel Spear\n    Inventory [actor] [actor] [add] [Steel Spear] [1]\nEndif\n</code></pre> <p>If the player who activated this script has 20 or more skill levels in Defence, then they will recieve a spear, otherwise this script does nothing.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/hasskill/#see-also","title":"See Also","text":"<ul> <li>IsSkills command</li> <li>Skill command</li> <li>SkillXP command</li> <li>Skills System</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isclan/","title":"IsClan","text":"<p>Queries if the player is a member of a clan.</p> <p>IsClan [name] [true|false]</p> <p>[name] - The name of the clan to query if the player is in or not.</p> <p>[true|false] - If true, the command will return true if the player is in the specified clan.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isclan/#examples","title":"Examples","text":"isclan-example.txt<pre><code>If\n    // Is the player on the clan named Team1\n    IsClan [Team1] [true]\nThen\n    // Add player to Team2\n    Clan [Team2]\nElse\n    // Add player to Team1\n    Clan [Team1]\nEndif\n</code></pre> <p>If the player who activated this script is on Team1, it puts them on Team2. Otherwise, it puts them on Team1.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isclan/#see-also","title":"See Also","text":"<ul> <li>Clan command</li> <li>Clan Banners</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isclock/","title":"IsClock","text":"<p>Queries the current game hour.</p> <p>IsClock [hour] [true|false]</p> <p>IsClock [compare] [hour|history]</p> <p>[hour] - The hour to query.</p> <p>[hour|history] - The hour or history to query.</p> <p>[true|false] - If true, the command will return true if the clock time is the hour queried.</p> <p>[compare] - Comparision based on the current hour. Will return true if the comparision is met.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isclock/#examples","title":"Examples","text":"isclock-example-1.txt<pre><code>If\n    // Is it noon hour\n    IsClock [12] [true]\nThen\n    // It's high noon\n    Notify [It's high noon.] [global] [0,0,0]\nEndif\n</code></pre> <p>If it is noon hour (12 PM) a notification message is created displaying that \"it's high noon\", otherwise this script does nothing.</p> isclock-example-2.txt<pre><code>If\n    // Is it the afternoon\n    IsClock [&gt;] [12]\nThen\n    // It's sadly no longer high noon\n    Notify [It's not high noon.] [global] [0,0,0]\nEndif\n</code></pre> <p>If it is the afternoon a notification message is created displaying that \"it's not high noon\", otherwise this script does nothing.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isclock/#see-also","title":"See Also","text":"<ul> <li>IsDayTime command</li> <li>Clock Time</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isdaytime/","title":"IsDayTime","text":"<p>Queries if it is currently day time.</p> <p>IsDayTime [true|false]</p> <p>[true|false] - If true, the command will return true if it is currently day time.</p> <p>It is considered day time between 6.75 to 17.25 in clock time.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isdaytime/#examples","title":"Examples","text":"isdaytime-example.txt<pre><code>If\n    // Is it night time\n    IsDayTime [false]\nThen\n    // Give a bed\n    Inventory [actor] [add] [Bed] [1]\nEndif\n</code></pre> <p>If it is currently night time then give the player who activated this script a bed, otherwise this script does nothing.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isdaytime/#see-also","title":"See Also","text":"<ul> <li>IsClock command</li> <li>Clock Time</li> </ul>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isfiniteresources/","title":"IsFiniteResources","text":"<p>Queries if Finite Resources is enabled.</p> <p>IsFiniteResources [true|false]</p> <p>[true|false] - If true, the command will return true if Finite Resources is enabled.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isfiniteresources/#examples","title":"Examples","text":"isfiniteresources-example.txt<pre><code>If\n    // Is Finite Resources enabled\n    IsFiniteResources [true]\nThen\n    Notify [Finite Resources is enabled.] [global] [0,0,0]\nElse\n    Notify [Finite Resources is disabled.] [global] [0,0,0]\nEndif\n</code></pre> <p>If Finite Resources is enabled, a notification message is created displaying that Finite Resources is enabled. Otherwise, a notification message is created displaying that Finite Resources is disabled.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isskills/","title":"IsSkills","text":"<p>Queries if the skill system is enabled.</p> <p>IsSkills [true|false]</p> <p>[true|false] - If true, the command will return true if the skill system is enabled.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isskills/#examples","title":"Examples","text":"isskills-example.txt<pre><code>If\n    // Is the skill system enabled\n    IsSkills [true]\nThen\n    Skill [Health] [7]\nEndif\n</code></pre> <p>If the skill system is enabled, than the Health skill level of the player who activated this script will be set to 7, otherwise this script does nothing.</p>","tags":["TMScript"]},{"location":"tmscript/commands/query-commands/isskills/#see-also","title":"See Also","text":"<ul> <li>HasSkill command</li> <li>Skill command</li> <li>SkillXP command</li> <li>Skills System</li> </ul>","tags":["TMScript"]}]}